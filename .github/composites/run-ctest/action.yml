name: "Run CMake tests"
description: "Runs CMake tests for every OS"

inputs:
  check-memleaks:
    description: "If set to true, test will be run checking for memory leaks."
    required: false
    default: false
#  drmemory:
#    description: "Full path to Dr. Memory executable"
#    required: false
outputs:
  exist-memleaks:
    description: "If True, the tests run show memory leaks." 
    value: ${{ steps.check-memleaks.outputs.exist-memleaks }}
  memleak-test-numbers:
    description: "Numbers of the tests with memory leaks." 
    value: ${{ steps.get-memleak-tests.outputs.test-numbers }}

runs:
  using: "composite"
  steps:
    - name: Run tests without memory check (Linux)
      if: runner.os == 'Linux' && inputs.check-memleaks == 'false'
      working-directory: "${{ github.workspace }}/build"
      shell: bash
      run: ctest -C ${{ env.BUILD_TYPE }} -T test --rerun-failed --output-on-failure

    - name: Run tests without memory check (Windows)
      if: runner.os == 'Windows' && inputs.check-memleaks == 'false'
      working-directory: "${{ github.workspace }}/build"
      shell: cmd
      run: ctest -T test --rerun-failed --output-on-failure

    - name: Run tests without memory check (MacOS)
      if: runner.os == 'macOS' && inputs.check-memleaks == 'false'
      working-directory: "${{ github.workspace }}/build"
      shell: bash
      run: ctest -C ${{ env.BUILD_TYPE }} -T test --rerun-failed --output-on-failure

    - name: Run tests with memory check (Linux)
      if: runner.os == 'Linux' && inputs.check-memleaks == 'true'
      working-directory: "${{ github.workspace }}/build"
      shell: bash
      run: ctest -C ${{ env.BUILD_TYPE }} -T memcheck --rerun-failed --output-on-failure | tee ${{ github.workspace }}/memcheck_output.txt

    #- name: Run tests with memory check (Windows)
    #  if: runner.os == 'Windows' && inputs.check-memleaks == 'true'
    #  working-directory: "${{ github.workspace }}/build"
    #  shell: bash
    #  run: ${{ inputs.drmemory }} -show_reachable -- ctest -C ${{ env.BUILD_TYPE }} --rerun-failed --output-on-failure

    #- name: Run tests with memory check (MacOS)
    #  if: runner.os == 'macOS' && inputs.check-memleaks == 'true'
    #  working-directory: "${{ github.workspace }}/build"
    #  shell: bash
    #  run: |
    #    export MallocStackLogging=1
    #    leaks --fullContent --atExit -- ctest -C ${{ env.BUILD_TYPE }} --rerun-failed --output-on-failure

    - name: Check if there are any memory leaks
      if: inputs.check-memleaks == 'true'
      id: check-memleaks
      shell: bash
      run: |
        # Check if there are any memory leaks
        export EXIST_MEMLEAKS='false'
        if [ -f "memcheck_output.txt" ]; then
          # Find the line number of "Memory checking results:"
          memory_check_results_line=$(grep -n "Memory checking results:" "memcheck_output.txt" | cut -d: -f1)
          if [ -z "$memory_check_results_line" ]; then
            echo "Line with content 'Memory checking results:' not found."
          else
            # Check if there are any lines after "Memory checking results:"
            output_after_results=$(tail -n +$((memory_check_results_line + 1)) "memcheck_output.txt")
            if [ -z "$output_after_results" ]; then
              echo "There are no memory leaks. Congrats!"
            else
              echo "Some memory leaks were found, and their logs are shown in the next step."
              export EXIST_MEMLEAKS='true'
            fi
          fi
        else
          echo "Log file with test execution not found."
        fi
        echo "exist-memleaks=$EXIST_MEMLEAKS" >> "$GITHUB_OUTPUT"

    - name: Get number of tests with memory leaks
      if: inputs.check-memleaks == 'true'
      id: get-memleak-tests
      shell: bash
      run: |
        export TEST_NUMBERS=''
        if [ "${{ steps.check-memleaks.outputs.exist-memleaks }}" = "true" ]; then
          processing_output_line=$(grep -n "Processing memory checking output:" "memcheck_output.txt" | cut -d: -f1)
          output_after_processing=$(tail -n +$((processing_output_line + 1)) "memcheck_output.txt")
          test_numbers=()
          while IFS= read -r line; do
            if [[ "$line" == *"Defects:"* ]]; then
              test_number=$(echo "$line" | awk '{print $1}' | cut -d'/' -f1)
              test_numbers+=("$test_number")
            fi
          done <<< "$output_after_processing"
          
          if [ ${#test_numbers[@]} -gt 0 ]; then
            test_numbers_str=$(IFS=,; echo "${test_numbers[*]}")
            echo "Test numbers affected by the memory leak: ${test_numbers_str}"
            export TEST_NUMBERS=$test_numbers_str
          fi
        fi
        echo "test-numbers=$TEST_NUMBERS" >> "$GITHUB_OUTPUT"
